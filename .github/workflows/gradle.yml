# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: SpringBoot & Gradle CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        # 사용하는 자바 버전 17
        java-version: '17'
        distribution: 'temurin'
    
    # application.yml은 외부에 노출되면 안 되기 때문에  Actions가 빌드될 때 마다 해당 Repository의 Secret 설정을 이용해서 설정 파일 생성
  #  - run: touch./src/main/resources/application.yml
  #  - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
  #  - run: cat ./src/main/resources/application.yml
    
    # gradlew에 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradelw
      
    # gradlew 빌드
    - name: Build with Gradle
      run: gradlew clean build
      
    # 빌드를 성공하면 해당 프로젝트를 zip로 만든다
  #  - name: Make zip file
   #   run: zip -r ./ConcertCalendar.zip .
    #  shell: bash
      
    # AWS 계정 설정
  #  - name: Configure AWS credentials
   #   uses: aws-actions/configure-aws-credentials@v1
   #   with:
      # 깃허브 secret에 넣어둔 access key
    #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # 깃허브 Secrets에 넣어둔 Secret key
    #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # 깃허브 secrets에 넣어둔 Region
     #   aws-region: ${{ secrets.AWS_REGION }}
        
    # 만들어 놓은 S3에 해당 zip 파일 저장
   # - name: Upload to S3
    #  run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./ConcertCalendar.zip s3://concertcalendardeploy/ConcertCalendar.zip
      
    # AWS CodeDeploy에 배포
   # - name: Deploy
    #  env:
     #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     # run: |
      #  aws deploy create-deployment 
        




